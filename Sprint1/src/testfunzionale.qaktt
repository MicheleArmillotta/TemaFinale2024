System sprintuno

Event burnEnd : burnEnd(N)
Dispatch activation_command : activation_command(N)
Dispatch startBurn : startBurn(N)
//WIS e opRobot
Dispatch startRobot : startRobot(X)
//messaggi di interazione tra opRobot e basicRobot24
Request engage        : engage(OWNER, STEPTIME)
Reply   engagedone    : engagedone(ARG) for engage
Reply   engagerefused : engagerefused(ARG) for engage
Request moverobot    :  moverobot(TARGETX, TARGETY)
Reply moverobotdone  :  moverobotok(ARG)
Reply moverobotfailed:  moverobotfailed(PLANDONE, PLANTODO)
//updateResources
//Test messages
Dispatch info : info(X, Y)
Dispatch nuovo : nuovo(X, Y)
Request start_test : start_test(X)
Reply start_test_reply : start_test_reply(X) for start_test

// Da waste storage/ash storage a WIS
Dispatch add:add(N)
Dispatch update : update(N)
Dispatch add2:add2(N)
Dispatch update2:update2(N)

// per test
Dispatch waste : waste(N)
Dispatch ash : ash(N)

Context ctxtest ip [host="localhost" port=10014]
Context ctxbasicrobot ip [host="127.0.0.1"  port=8020]

ExternalQActor basicrobot context ctxbasicrobot

QActor wis context ctxtest{
	[#
		var RobPos = ""
		var RP_w = 0
		var Ash_distance = 0  // settata a 0 per i tst
		var Inc_stat = "off"
		val Ash_limit = 10  //qualche misura
		var rob = "idle" 
		
	#]
	
	State s0 initial{
		println("WIS: wis starting...") color red
		delay 1000
		observeResource oprobot msgid info
	 	forward incinerator -m activation_command : activation_command(start)
	 }
	 Goto wait_message
	 
	 State wait_message{
	 	println("WIS: waiting the state update...") color green
	 }
	 
	 Transition t0 whenMsg info  -> manageState //Ã¨ per forza quello lavoro off (si potrebbe aggiungere stato di errore)
	  			   whenMsg update -> update      //quindi il robot sta aspettando il segnale
	  			   
	State update{
		println("WIS: aggiorno stato di WasteStorage") color green
		onMsg( update : update(N)){
			[# RP_w = RP_w + payloadArg(0).toInt() #]
			updateResource [# "nuovo($RP_w, $Ash_distance)" #]
			
		}
		println("WIS: $RP_w, $Ash_distance") color red
		
	}		
	
	Transition t0 whenMsg info  -> manageState
								
	State manageState{
		//per ora polling mock
		onMsg( info :  info(X,Y) ){
				[# RobPos = payloadArg(1)  #]		
		}
		//to_DO: UPDATE RESOURCES PER MONITOR (prossimi sprint)
		// RP_w = (0..5).random() 
//		[#
//		           
//         Ash_distance = (10..50).random()
//        #]
        
        
        [#
         if(RP_w>0 && Ash_distance < Ash_limit ){
         #]
         println(" WIS: invio messaggio start") color magenta
         println(" WIS: controllo: condizioni corrette e start") color magenta
         
         forward oprobot -m startRobot : startRobot( start )
        
      [#
      	RP_w = RP_w - 1
      	rob = "working"
      	}
   
      #]
     
      	println("WIS: $RP_w, $Ash_distance") color magenta      	
	
 	}
 	
 	  Goto idle if [# rob === "working" #] else polling

    	State polling{}
    	Transition t1 
    	whenTime 2000 -> manageState
    	
    	
    	State idle{
    		println("WIS: waiting for updates...") color green
    	}

		
		
		Transition t2 whenMsg info  -> managePosition
					whenMsg update2 -> update2
					
		State update2{
			println("WIS: aggiorno stato di AshStorage") color green
			onMsg( update2 : update2(N)){
				[# Ash_distance = payloadArg(0).toInt() #]
				updateResource [# "nuovo($RP_w, $Ash_distance)" #]
				
			}
			
			println("WIS: $RP_w, $Ash_distance") color blue
			
		}
		
		Transition t2 whenMsg info  -> managePosition
					whenMsg update2 -> update2
					
		State managePosition{
			println("WIS: changing the position...") color green
			onMsg( info :  info(X,Y) ){
				[# val Y = payloadArg(1)  #]
				println("WIS: robPosition -> $Y") color magenta
				//to-DO : UPDATE RESOURCE PER IL MONITOR
				[# RobPos = "$Y"
				if(Y.equals("BURNIN")){	
				#]
					println("WIS: incinerator BURN") color red
					forward incinerator -m startBurn : startBurn(start)
				[#
				}
				#]
				
			}
		}
		Goto wait_message if [# RobPos.equals("ASHOUT") #] else idle
		
		State idle{}
	
		Transition t2 whenMsg update2 -> update2
					
		
		


}


QActor incinerator context ctxtest{
	[#
        val BTIME = 4000L;
        var start = "off";
	#]
	
	State s0 initial{
		println("incinerator ready...") color yellow
		delay 1000
	}
	
	Transition t0
		whenMsg activation_command -> start
		
	
	State start{
		println("the incinerator has started...") color green
		[# start ="on"; #]
	}
	
	Transition t1
		whenMsg startBurn -> handleBurn
		
	State handleBurn{
		println("the incinerator is burning...") color red
		delay 15000
		emit burnEnd : burnEnd(finish)
		
		
	}
	
	Transition t2
		whenMsg startBurn -> handleBurn
		
}



QActor oprobot context ctxtest{
	
	[#
		var Position = ""
		var State = ""
	#]
	
	State s0 initial{
		println("opRobot ready...") color yellow
		delay 300
		
	}
	Goto invio
	
	State invio{
		delay 2000
		request basicrobot -m engage : engage($MyName, 330)
		printCurrentMessage color blue
		println("opRobot manda request")
	}
	
	Transition t0 whenReply engagedone   -> home				
 	              whenReply engagerefused -> error
 	              
 	State home{
 		printCurrentMessage color blue
 		println("opRobot in HOME...") color red
 		[# Position = "HOME" #]
 		delay 1000
 		[# State = "idle" #]
 		updateResource [# "info($State, $Position)" #] 
 		
 	}
 	
 	Transition t1 whenMsg startRobot -> handleRP
 	
 	
 	State handleRP{
 		println("opRobot to RP...") color blue
 		[# State = "work" #]
 		//updateResource [# "info($State, $Position)" #] 
 		request basicrobot -m moverobot : moverobot (0,4) //pos wateIN
 		
 	}
 	
 	Transition t2 whenReply moverobotdone   -> handleBurnIn			
 	              whenReply moverobotfailed -> error
 	              
 	              
 	State handleBurnIn{
 		println("opRobot in wateIn going to burnIn...") color yellow
 		[# Position = "WASTEIN" #]
 		delay 2000 //pick up time
 		updateResource [# "info($State, $Position)" #] 
 		request basicrobot -m moverobot : moverobot (3,1) //pos burnIn
 		
 		
 	} 
 	
 	
 	Transition t3 whenReply moverobotdone   -> handleHome2		
 	              whenReply moverobotfailed -> error
 	              
 	              
 	 State handleHome2{
 	 	println("opRobot in burIn going to HOME...") color yellow
 		[# Position = "BURNIN" #]
 		delay 2000 //deposit time
 		updateResource [# "info($State, $Position)" #] 
 		request basicrobot -m moverobot : moverobot (0,0) //HOME
 	 }
 	 
 	 
 	 Transition t4 whenReply moverobotdone   -> home2	
 	              	whenReply moverobotfailed -> error
 	              	
 	              	
 	  State home2{
 	  	println("opRobot HOME waiting for the incinerator to stop...") color yellow
 	  	[# Position = "HOME" #]
 		updateResource [# "info($State, $Position)" #] 
 	  	
 	  }
 	  
 	  
 	  Transition t5 whenEvent burnEnd -> handleBurnOut
 	  
 	  
 	  State handleBurnOut{
 	  	println("opRobot in HOME going to gathering ashes...") color yellow
 		request basicrobot -m moverobot : moverobot (5,3) // burnOUT
 	  }
 	  
 	  Transition t6 whenReply moverobotdone   -> handleBurnOutGo	
 	              	whenReply moverobotfailed -> error
 	              	
 	              	
 	  
 	   State handleBurnOutGo{
 	 	println("opRobot in BurnOUT going to AshOUT...") color yellow
 		[# Position = "BURNOUT" #]
 		delay 2000 //gathering time
 		updateResource [# "info($State, $Position)" #] 
 		request basicrobot -m moverobot : moverobot (6,4) //AshOUT
 	 }
 	 
 	 
 	  Transition t7 whenReply moverobotdone   -> handleAshOut	
 	              	whenReply moverobotfailed -> error
 	              	
 	              	
 	  State handleAshOut{
 	  	forward ashstorage -m add2 : add2(1)
 	  	println("opRobot in AshOUT going to HOME...") color yellow
 	  	println("RESTARTING THE ROUTINE...") color red
 		[# Position = "ASHOUT" #]
 		delay 2000 //deposit time
 		updateResource [# "info($State, $Position)" #] 
 		request basicrobot -m moverobot : moverobot (0,0) //HOME
 		
 		
 	  }
 	  
 	  
 	  Transition t7 whenReply moverobotdone   -> home	
 	              	whenReply moverobotfailed -> error
 	 
 	  
 	              	
 	              	
 	       
 	              	
  	State error{
 		println("ERROR...") color red
 		[#System.exit(-1)#]
 	}
}

QActor wastestorage context ctxtest {
    [#
        var WasteLimit = 5;   // Numero per test RANDOM
    #]

    State s0 initial {
        println("WasteStorage Mock ready...") color green
        delay 300
    }
	
	Transition t0 whenMsg add -> incrementa
	
	State incrementa{
		 println("WasteStorage Mock aggiungo al contenitore...") color green
		 onMsg( add :  add(N) ){
				[# WasteLimit = WasteLimit + payloadArg(0).toInt()  #]
				println("WasteStorage aumentato fino a $WasteLimit") color magenta
				forward wis -m update : update($WasteLimit)
				
		}
	}
}

QActor esterno context ctxtest{
	
	State s0 initial{
		println("Agente che carica gli RP ready...") color green
		delay 300
		[# val K = (1..3).random(); #]
		forward wastestorage -m add : add($K)
	}
	
	
	//Transition t0 whenTime 100000 -> s0
}

QActor ashstorage context ctxtest {
    [#
        var AshStorage = 0;   
    #]

    State s0 initial {
        println("AshStorage Mock ready...") color green
        delay 3000
    }
	
	Transition t0 whenMsg add2 -> incrementa
	
	State incrementa{
		 println("AshStorage Mock aggiungo al contenitore...") color green
		 onMsg( add2 :  add2(N) ){
				[# AshStorage = AshStorage + payloadArg(0).toInt()  #]
				println("AshStorage aumentato fino a $AshStorage") color magenta
				forward wis -m update2 : update2($AshStorage)
				
		}
	}
}



QActor test_observer context ctxtest{

	[#
		var WasteStorage_prec = 0
		var AshStorage_prec = 0
		var WasteStorage = 0
		var AshStorage = 0
	#]

	State s0 initial{
		println("$name ready...") color blue
//		delay 1000
		observeResource wis msgid nuovo
	}
	
	Transition t0 whenMsg nuovo -> controllo
	
	State controllo{
		printCurrentMessage color magenta
		onMsg( nuovo : nuovo(X, Y) ){
			[# WasteStorage_prec = payloadArg(0).toInt() #]
			[# AshStorage_prec = payloadArg(1).toInt() #]
			println("$name WasteStorage_prec: $WasteStorage_prec  AshStorage_prec: $AshStorage_prec") color green
			
		}
	}

	Transition t1 whenRequest start_test -> handleStart
				  
	State handleStart{
		printCurrentMessage color green
		//forward oprobot -m startRobot : startRobot(start)
   		println("$name vado in attesa di nuovo aggiornamento")
	}
	
	Transition t2 whenMsg nuovo -> fine
	
	State fine{
		printCurrentMessage 
		onMsg( nuovo :  nuovo(X, Y) ){
			[#  WasteStorage = payloadArg(0).toInt() #]
    	    [#  AshStorage = payloadArg(1).toInt() #]
    	   
    		
    		println("$name $WasteStorage $WasteStorage_prec $AshStorage $AshStorage_prec")
   		
   		[# if((WasteStorage == WasteStorage_prec - 1) && (AshStorage == AshStorage_prec + 1)){  #]
 
   			     replyTo start_test with start_test_reply : start_test_reply(ok)
   			[# }else{ #]
   			   	replyTo start_test with start_test_reply : start_test_reply(NO)
   				
   		[#	} #]
   		}
	}
		
	
	Transition t2 whenMsg nuovo -> fine
}
