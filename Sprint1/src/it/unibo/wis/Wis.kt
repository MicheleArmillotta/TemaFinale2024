/* Generated by AN DISI Unibo */ 
package it.unibo.wis

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023

//User imports JAN2024

class Wis ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		
				var RobPos = ""
				var RP_w = 0
				var Ash_distance = 0
				var Inc_stat = "off"
				val Ash_limit = 10  //qualche misura
				var rob = "idle" 
				
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outred("WIS: wis starting...")
						delay(2000) 
						observeResource("localhost","8080","ctxsprintuno","oprobot","info")
						forward("activation_command", "activation_command(start)" ,"incinerator" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="wait_message", cond=doswitch() )
				}	 
				state("wait_message") { //this:State
					action { //it:State
						CommUtils.outgreen("WIS: waiting the state update...")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="manageState",cond=whenDispatch("info"))
					transition(edgeName="t01",targetState="update",cond=whenDispatch("update"))
					transition(edgeName="t02",targetState="update2",cond=whenDispatch("update2"))
				}	 
				state("update") { //this:State
					action { //it:State
						CommUtils.outgreen("WIS: aggiorno stato di WasteStorage")
						if( checkMsgContent( Term.createTerm("update(N)"), Term.createTerm("update(N)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 RP_w = RP_w + payloadArg(0).toInt()  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t03",targetState="manageState",cond=whenDispatch("info"))
					transition(edgeName="t04",targetState="update",cond=whenDispatch("update"))
					transition(edgeName="t05",targetState="update2",cond=whenDispatch("update2"))
				}	 
				state("manageState") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("info(X,Y)"), Term.createTerm("info(X,Y)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 RobPos = payloadArg(1)   
						}
						
								           
						         Ash_distance = (10..50).random()
						
						         if(RP_w>0 && Ash_distance > Ash_limit ){
						CommUtils.outmagenta(" WIS: invio messaggio start")
						CommUtils.outmagenta(" WIS: controllo: condizioni corrette e start")
						forward("startRobot", "startRobot(start)" ,"oprobot" ) 
						
						      	RP_w = RP_w - 1
						      	rob = "working"
						      	}
						   
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitchGuarded({ rob === "working"  
					}) )
					transition( edgeName="goto",targetState="polling", cond=doswitchGuarded({! ( rob === "working"  
					) }) )
				}	 
				state("polling") { //this:State
					action { //it:State
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
				 	 		stateTimer = TimerActor("timer_polling", 
				 	 					  scope, context!!, "local_tout_"+name+"_polling", 2000.toLong() )  //OCT2023
					}	 	 
					 transition(edgeName="t16",targetState="manageState",cond=whenTimeout("local_tout_"+name+"_polling"))   
				}	 
				state("idle") { //this:State
					action { //it:State
						CommUtils.outgreen("WIS: waiting for updates...")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t27",targetState="managePosition",cond=whenDispatch("info"))
					transition(edgeName="t28",targetState="update",cond=whenDispatch("update"))
					transition(edgeName="t29",targetState="update2",cond=whenDispatch("update2"))
				}	 
				state("update2") { //this:State
					action { //it:State
						CommUtils.outgreen("WIS: aggiorno stato di AshStorage")
						if( checkMsgContent( Term.createTerm("update2(N)"), Term.createTerm("update2(N)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 Ash_distance = payloadArg(0).toInt()  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
				state("managePosition") { //this:State
					action { //it:State
						CommUtils.outgreen("WIS: changing the position...")
						if( checkMsgContent( Term.createTerm("info(X,Y)"), Term.createTerm("info(X,Y)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 val Y = payloadArg(1)   
								CommUtils.outmagenta("WIS: robPosition -> $Y")
								 RobPos = "$Y"
												if(Y.equals("BURNIN")){	
								CommUtils.outred("WIS: incinerator BURN")
								forward("startBurn", "startBurn(start)" ,"incinerator" ) 
								
												}
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="wait_message", cond=doswitchGuarded({ RobPos.equals("ASHOUT")  
					}) )
					transition( edgeName="goto",targetState="idle", cond=doswitchGuarded({! ( RobPos.equals("ASHOUT")  
					) }) )
				}	 
			}
		}
} 
