/* Generated by AN DISI Unibo */ 
package it.unibo.wisobserver

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023

//User imports JAN2024

class Wisobserver ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		 val State = "idle"
			   var Position = "HOME"
			   var RP_string = ""
			   var Ash_string = ""	 
			   var RP_w = 0
			   var Ash_distance = 0	
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outred("WISobs: observerStarting...")
						observeResource("localhost","8080","ctxtestwis","wis","infotest")
						delay(2000) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("idle") { //this:State
					action { //it:State
						CommUtils.outred("Wisobs idle...")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t13",targetState="handleStart",cond=whenRequest("start_test"))
					transition(edgeName="t14",targetState="handleBurn",cond=whenRequest("burn_test"))
				}	 
				state("handleStart") { //this:State
					action { //it:State
						updateResourceRep( "info($State, $Position)"  
						)
						CommUtils.outred("Wisobs: Robot free sended...")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t25",targetState="handleStartRobot",cond=whenDispatch("startRobot"))
				}	 
				state("handleStartRobot") { //this:State
					action { //it:State
						CommUtils.outred("Wisobs: startRobot!! waitin for the checks...")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t36",targetState="handleStartTest",cond=whenDispatch("infotest"))
				}	 
				state("handleStartTest") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("infotest(X,Y)"), Term.createTerm("infotest(X,Y)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 RP_string = payloadArg(0)  
												   Ash_string = payloadArg(1)
												   RP_w = RP_string.toInt()
													Ash_distance = Ash_string.toInt()
												   Position = "ASHOUT"	
						}
						updateResourceRep( "info($State, $Position)"  
						)
						delay(1000) 
						
									if(RP_w > 0 && Ash_distance > 10){
						answer("start_test", "start_reply", "start_reply(ok)"   )  
						
								}else{
						answer("start_test", "start_reply", "start_reply(notok)"   )  
						
								}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("handleBurn") { //this:State
					action { //it:State
						updateResourceRep( "info($State, $Position)"  
						)
						CommUtils.outred("Wisobs: Robot free sended (HANDLEBURN)...")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t47",targetState="handleBurnRobot",cond=whenDispatch("startRobot"))
				}	 
				state("handleBurnRobot") { //this:State
					action { //it:State
						CommUtils.outred("Wisobs: startRobot!! waitin for the checks...")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t58",targetState="handleBurnTest",cond=whenDispatch("infotest"))
				}	 
				state("handleBurnTest") { //this:State
					action { //it:State
						 Position = "BURNIN"  
						updateResourceRep( "info($State, $Position)"  
						)
						CommUtils.outred("Wisobs: triggering burnIn...")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t59",targetState="handleBurning",cond=whenDispatch("startBurn"))
				}	 
				state("handleBurning") { //this:State
					action { //it:State
						CommUtils.outred("Wisobs: endTest burnIn...")
						 Position = "ASHOUT"  
						updateResourceRep( "info($State, $Position)"  
						)
						delay(1000) 
						answer("burn_test", "burn_reply", "burn_reply(ok)"   )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
			}
		}
} 
