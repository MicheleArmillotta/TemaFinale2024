/* Generated by AN DISI Unibo */ 
package it.unibo.incineratorobserver

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023

//User imports JAN2024

class Incineratorobserver ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outred("incinerator OBSERVER ready...")
						observeResource("localhost","8080","ctxtest","incinerator","info")
						delay(1000) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("idle") { //this:State
					action { //it:State
						CommUtils.outred("obs idle...")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t13",targetState="handleActivation",cond=whenRequest("activation_test"))
					transition(edgeName="t14",targetState="handleStart",cond=whenRequest("start_test"))
				}	 
				state("handleActivation") { //this:State
					action { //it:State
						forward("activation_command", "activation_command(start)" ,"incinerator" ) 
						CommUtils.outred("activation command inviato...")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t25",targetState="handleInfo",cond=whenDispatch("info"))
				}	 
				state("handleInfo") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("info(N)"), Term.createTerm("info(N)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								var incstate = payloadArg(0)  
												if(incstate.equals("on")){
								CommUtils.outred("incinerator state : $incstate ...")
								answer("activation_test", "activation_reply", "activation_reply(ok)"   )  
								
										}
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("handleStart") { //this:State
					action { //it:State
						forward("startBurn", "startBurn(start)" ,"incinerator" ) 
						CommUtils.outred("startBurn command inviato...")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t36",targetState="handleBurn",cond=whenEvent("burnEnd"))
				}	 
				state("handleBurn") { //this:State
					action { //it:State
						answer("start_test", "start_reply", "start_reply(ok)"   )  
						CommUtils.outred("start_reply inviata ...")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
			}
		}
} 
