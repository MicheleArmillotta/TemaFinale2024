/* Generated by AN DISI Unibo */ 
package it.unibo.test_observer

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023

//User imports JAN2024

class Test_observer ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		
				var stato = ""
				var burning = 0
		//		var ok = 0
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outblue("$name ready...")
						observeResource("localhost","10017","ctxmonitor","monitoring_device","nuovo")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t19",targetState="handleStart",cond=whenRequest("start_test"))
				}	 
				state("handleStart") { //this:State
					action { //it:State
						CommUtils.outgreen("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						CommUtils.outmagenta("$name vado in attesa di nuovo aggiornamento")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t110",targetState="fine",cond=whenDispatch("nuovo"))
				}	 
				state("fine") { //this:State
					action { //it:State
						CommUtils.outmagenta("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						if( checkMsgContent( Term.createTerm("nuovo(X,Y)"), Term.createTerm("nuovo(X,Y)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 stato = payloadArg(0)  
								 burning = payloadArg(1).toInt()  
								CommUtils.outmagenta("$name Stato: $stato Valore: $burning")
								 if((stato.equals("brucia")) && (burning==1)){   
								answer("start_test", "start_test_reply", "start_test_reply(ok)"   )  
								 }else{  
								answer("start_test", "start_test_reply", "start_test_reply(NO)"   )  
									}  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t111",targetState="fine",cond=whenDispatch("nuovo"))
				}	 
			}
		}
} 
