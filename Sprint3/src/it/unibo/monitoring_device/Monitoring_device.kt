/* Generated by AN DISI Unibo */ 
package it.unibo.monitoring_device

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023

//User imports JAN2024

class Monitoring_device ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		
				val DLIMIT = 200
				var Ash_level = 1000
				var burning = 0
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outgreen("START monitoring_device")
						delay(1000) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("idle") { //this:State
					action { //it:State
						CommUtils.outgreen("Monitoring device : WAITING FOR MESSAGES")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t048",targetState="handleSonar",cond=whenDispatch("sonar_value"))
					transition(edgeName="t049",targetState="handleTurnOff",cond=whenDispatch("turnLedOff"))
					transition(edgeName="t050",targetState="handleTurnOn",cond=whenDispatch("turnLedOn"))
					transition(edgeName="t051",targetState="handlePolling",cond=whenRequest("pollingAsh"))
					transition(edgeName="t052",targetState="handleAdd",cond=whenDispatch("addAsh"))
				}	 
				state("handleAdd") { //this:State
					action { //it:State
						 Ash_level = Ash_level + 200  
						updateResourceRep( "info($Ash_level)"  
						)
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("handleSonar") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("sonar_value(X)"), Term.createTerm("sonar_value(K)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 Ash_level = payloadArg(0).toInt()  
								CommUtils.outred("Ash_level: $Ash_level")
								forward("valAsh", "valAsh($Ash_level)" ,"observedactor" ) 
								if(  Ash_level<=DLIMIT || Ash_level == 1000  
								 ){forward("ledBlink", "ledBlink(N)" ,"led" ) 
								}
								else
								 {if(  burning==1  
								  ){forward("ledOn", "ledOn(N)" ,"led" ) 
								 }
								 else
								  {forward("ledOff", "ledOff(N)" ,"led" ) 
								  }
								 }
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("handleTurnOff") { //this:State
					action { //it:State
						CommUtils.outred("Monitoring device : burning off")
						 burning = 0  
						forward("ledOff", "ledff(N)" ,"led" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("handleTurnOn") { //this:State
					action { //it:State
						CommUtils.outred("Monitoring device : burning on")
						 burning = 1  
						forward("ledOn", "ledOn(N)" ,"led" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("handlePolling") { //this:State
					action { //it:State
						CommUtils.outred("Monitoring device : polling requested from WIS")
						answer("pollingAsh", "valueAsh", "valueAsh($Ash_level)"   )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
			}
		}
} 
