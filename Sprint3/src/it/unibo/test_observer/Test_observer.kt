/* Generated by AN DISI Unibo */ 
package it.unibo.test_observer

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023

//User imports JAN2024

class Test_observer ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		 var RP = 2 
			   var Inc = "acceso"
			   var Ash = 500
			   var Op = "HOME"
			   var RP_new = 0 
			   var Inc_new = "" 
			   var Ash_new = 0 	
			   var Op_new = ""
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outred("START TEST")
						delay(1000) 
						observeResource("localhost","8080","ctxsprintdue","observedactor","data")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t120",targetState="handleStart",cond=whenRequest("start_test"))
				}	 
				state("handleStart") { //this:State
					action { //it:State
						CommUtils.outred("HANDLE START!!!!")
						delay(2000) 
						forward("numRP", "numRP($RP)" ,"observedactor" ) 
						forward("statoIn", "statoIn($Inc)" ,"observedactor" ) 
						forward("valAsh", "valAsh($Ash)" ,"observedactor" ) 
						forward("statoOp", "statoOp($Op)" ,"observedactor" ) 
						delay(5000) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t221",targetState="discard1",cond=whenDispatch("data"))
				}	 
				state("discard1") { //this:State
					action { //it:State
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t222",targetState="discard2",cond=whenDispatch("data"))
				}	 
				state("discard2") { //this:State
					action { //it:State
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t223",targetState="discard3",cond=whenDispatch("data"))
				}	 
				state("discard3") { //this:State
					action { //it:State
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t224",targetState="handle_data",cond=whenDispatch("data"))
				}	 
				state("handle_data") { //this:State
					action { //it:State
						CommUtils.outred("HANDLE DATA!!!!")
						if( checkMsgContent( Term.createTerm("data(X,Y,Z,K)"), Term.createTerm("data(X,Y,Z,K)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 RP_new = payloadArg(0).toInt()
											   Inc_new = payloadArg(1)
											   Ash_new = payloadArg(3).toInt()	
											   Op_new = payloadArg(2)
											   
						}
						
									if(RP == RP_new && Inc == Inc_new && Ash == Ash_new && Op == Op_new){
						answer("start_test", "start_test_reply", "start_test_reply(ok)"   )  
						
								}else{
						answer("start_test", "start_test_reply", "start_test_reply(notok)"   )  
						
								}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
			}
		}
} 
