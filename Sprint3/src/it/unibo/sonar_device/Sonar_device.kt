/* Generated by AN DISI Unibo */ 
package it.unibo.sonar_device

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023

//User imports JAN2024

class Sonar_device ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		 var K= 0  
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outyellow("START sonar_device")
						 K= 1000  
						delay(1500) 
						emitLocalStreamEvent("sonardata", "sonardata($K)" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("idle") { //this:State
					action { //it:State
						CommUtils.outyellow("sonar_device waiting..")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
				 	 		stateTimer = TimerActor("timer_idle", 
				 	 					  scope, context!!, "local_tout_"+name+"_idle", 80000.toLong() )  //OCT2023
					}	 	 
					 transition(edgeName="t058",targetState="gatherAsh",cond=whenTimeout("local_tout_"+name+"_idle"))   
					transition(edgeName="t059",targetState="handleAsh",cond=whenDispatch("deposit_ash"))
				}	 
				state("handleAsh") { //this:State
					action { //it:State
						 K= K - 200  
						CommUtils.outyellow("ASH = $K")
						emitLocalStreamEvent("sonardata", "sonardata($K)" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("gatherAsh") { //this:State
					action { //it:State
						 K= 1000  
						CommUtils.outyellow("ASH vuoto")
						emitLocalStreamEvent("sonardata", "sonardata($K)" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
			}
		}
} 
