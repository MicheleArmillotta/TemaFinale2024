/* Generated by AN DISI Unibo */ 
package it.unibo.observedactor

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023

//User imports JAN2024

class Observedactor ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		
				var WasteStorage = 0;
				var AshStorage = 0;
				var InciStatus = "spento";
				var OpRobot = "home";
				
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outblue("$name attivo")
						delay(500) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="ready", cond=doswitch() )
				}	 
				state("ready") { //this:State
					action { //it:State
						CommUtils.outgreen("$name READY")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t10",targetState="handle_rp",cond=whenDispatch("numRP"))
					transition(edgeName="t11",targetState="handle_Inci",cond=whenDispatch("statoIn"))
					transition(edgeName="t12",targetState="handle_Op",cond=whenDispatch("statoOp"))
					transition(edgeName="t13",targetState="handle_Ash",cond=whenDispatch("valAsh"))
				}	 
				state("handle_rp") { //this:State
					action { //it:State
						CommUtils.outblack("$name aggiorno stato di WasteStorage")
						if( checkMsgContent( Term.createTerm("numRP(X)"), Term.createTerm("numRP(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 var kg = payloadArg(0).toInt()
												WasteStorage = kg // 50
						}
						CommUtils.outblack("$name numero RP: $WasteStorage  incinerator: $InciStatus	robot: $OpRobot	 ash: $AshStorage")
						updateResourceRep( "data($WasteStorage, $InciStatus, $OpRobot, $AshStorage)"  
						)
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t14",targetState="handle_rp",cond=whenDispatch("numRP"))
					transition(edgeName="t15",targetState="handle_Inci",cond=whenDispatch("statoIn"))
					transition(edgeName="t16",targetState="handle_Op",cond=whenDispatch("statoOp"))
					transition(edgeName="t17",targetState="handle_Ash",cond=whenDispatch("valAsh"))
				}	 
				state("handle_Inci") { //this:State
					action { //it:State
						CommUtils.outblack("$name aggiorno stato di Incinerator")
						if( checkMsgContent( Term.createTerm("statoIn(N)"), Term.createTerm("statoIn(N)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 InciStatus = payloadArg(0)  
						}
						CommUtils.outblack("$name numero RP: $WasteStorage  incinerator: $InciStatus	robot: $OpRobot	 ash: $AshStorage")
						updateResourceRep( "data($WasteStorage, $InciStatus, $OpRobot, $AshStorage)"  
						)
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t18",targetState="handle_rp",cond=whenDispatch("numRP"))
					transition(edgeName="t19",targetState="handle_Inci",cond=whenDispatch("statoIn"))
					transition(edgeName="t110",targetState="handle_Op",cond=whenDispatch("statoOp"))
					transition(edgeName="t111",targetState="handle_Ash",cond=whenDispatch("valAsh"))
				}	 
				state("handle_Op") { //this:State
					action { //it:State
						CommUtils.outblack("$name aggiorno stato di OpRobot")
						if( checkMsgContent( Term.createTerm("statoOp(N)"), Term.createTerm("statoOp(N)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 OpRobot = payloadArg(0)  
						}
						CommUtils.outblack("$name numero RP: $WasteStorage  incinerator: $InciStatus	robot: $OpRobot	 ash: $AshStorage")
						updateResourceRep( "data($WasteStorage, $InciStatus, $OpRobot, $AshStorage)"  
						)
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t012",targetState="handle_Op",cond=whenDispatch("statoOp"))
					transition(edgeName="t013",targetState="handle_rp",cond=whenDispatch("numRP"))
					transition(edgeName="t014",targetState="handle_Inci",cond=whenDispatch("statoIn"))
					transition(edgeName="t015",targetState="handle_Ash",cond=whenDispatch("valAsh"))
				}	 
				state("handle_Ash") { //this:State
					action { //it:State
						CommUtils.outblack("$name aggiorno stato di AshStorage")
						if( checkMsgContent( Term.createTerm("valAsh(X)"), Term.createTerm("valAsh(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 AshStorage = payloadArg(0).toInt()  
						}
						CommUtils.outblack("$name numero RP: $WasteStorage  incinerator: $InciStatus	robot: $OpRobot	 ash: $AshStorage")
						updateResourceRep( "data($WasteStorage, $InciStatus, $OpRobot, $AshStorage)"  
						)
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t016",targetState="handle_Op",cond=whenDispatch("statoOp"))
					transition(edgeName="t017",targetState="handle_rp",cond=whenDispatch("numRP"))
					transition(edgeName="t018",targetState="handle_Inci",cond=whenDispatch("statoIn"))
					transition(edgeName="t019",targetState="handle_Ash",cond=whenDispatch("valAsh"))
				}	 
			}
		}
} 
