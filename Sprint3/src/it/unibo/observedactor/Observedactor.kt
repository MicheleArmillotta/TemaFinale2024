/* Generated by AN DISI Unibo */ 
package it.unibo.observedactor

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023

//User imports JAN2024

class Observedactor ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		
				var WasteStorage = 0;
				var AshStorage = 0;
				var InciStatus = "spento";
				var OpRobot = "home";
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outblue("ObserverActor attivo")
						delay(500) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="ready", cond=doswitch() )
				}	 
				state("ready") { //this:State
					action { //it:State
						CommUtils.outgreen("ObserverActor READY")
						updateResourceRep( "$name	INFO:	numero RP: $WasteStorage incinerator: $InciStatus	robot: $OpRobot	ash: $AshStorage"  
						)
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t128",targetState="handle_rp",cond=whenDispatch("numRP"))
					transition(edgeName="t129",targetState="handle_Inci",cond=whenDispatch("statoIn"))
					transition(edgeName="t130",targetState="handle_Op",cond=whenDispatch("statoOp"))
					transition(edgeName="t131",targetState="handle_Ash",cond=whenDispatch("valAsh"))
				}	 
				state("handle_rp") { //this:State
					action { //it:State
						CommUtils.outblack("ObserverActor aggiorno stato di WasteStorage")
						if( checkMsgContent( Term.createTerm("numRP(X)"), Term.createTerm("numRP(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 var kg = payloadArg(0).toInt()
												WasteStorage = kg // 50
						}
						CommUtils.outblack("$name numero RP: $WasteStorage  incinerator: $InciStatus	robot: $OpRobot	 ash: $AshStorage")
						updateResourceRep( "$name	INFO:	numero RP: $WasteStorage  incinerator: $InciStatus	robot: $OpRobot	 ash: $AshStorage"  
						)
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t132",targetState="handle_rp",cond=whenDispatch("numRP"))
					transition(edgeName="t133",targetState="handle_Inci",cond=whenDispatch("statoIn"))
					transition(edgeName="t134",targetState="handle_Op",cond=whenDispatch("statoOp"))
					transition(edgeName="t135",targetState="handle_Ash",cond=whenDispatch("valAsh"))
				}	 
				state("handle_Inci") { //this:State
					action { //it:State
						CommUtils.outblack("ObserverActor aggiorno stato di Incinerator")
						if( checkMsgContent( Term.createTerm("statoIn(N)"), Term.createTerm("statoIn(N)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 InciStatus = payloadArg(0)  
						}
						CommUtils.outblack("$name numero RP: $WasteStorage  incinerator: $InciStatus	robot: $OpRobot	 ash: $AshStorage")
						updateResourceRep( "$name	INFO:	numero RP: $WasteStorage  incinerator: $InciStatus	robot: $OpRobot	 ash: $AshStorage"  
						)
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t136",targetState="handle_rp",cond=whenDispatch("numRP"))
					transition(edgeName="t137",targetState="handle_Inci",cond=whenDispatch("statoIn"))
					transition(edgeName="t138",targetState="handle_Op",cond=whenDispatch("statoOp"))
					transition(edgeName="t139",targetState="handle_Ash",cond=whenDispatch("valAsh"))
				}	 
				state("handle_Op") { //this:State
					action { //it:State
						CommUtils.outblack("ObserverActor aggiorno stato di OpRobot")
						if( checkMsgContent( Term.createTerm("statoOp(N)"), Term.createTerm("statoOp(N)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 OpRobot = payloadArg(0)  
						}
						CommUtils.outblack("ObserverActor numero RP: $WasteStorage  incinerator: $InciStatus	robot: $OpRobot	 ash: $AshStorage")
						updateResourceRep( "$name	INFO:	numero RP: $WasteStorage  incinerator: $InciStatus	robot: $OpRobot	 ash: $AshStorage"  
						)
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t040",targetState="handle_Op",cond=whenDispatch("statoOp"))
					transition(edgeName="t041",targetState="handle_rp",cond=whenDispatch("numRP"))
					transition(edgeName="t042",targetState="handle_Inci",cond=whenDispatch("statoIn"))
					transition(edgeName="t043",targetState="handle_Ash",cond=whenDispatch("valAsh"))
				}	 
				state("handle_Ash") { //this:State
					action { //it:State
						CommUtils.outblack("ObserverActor aggiorno stato di AshStorage")
						if( checkMsgContent( Term.createTerm("valAsh(X)"), Term.createTerm("valAsh(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 AshStorage = payloadArg(0).toInt()  
						}
						CommUtils.outblack("ObserverActor numero RP: $WasteStorage  incinerator: $InciStatus	robot: $OpRobot	 ash: $AshStorage")
						updateResourceRep( "$name	INFO:	numero RP: $WasteStorage  incinerator: $InciStatus	robot: $OpRobot	 ash: $AshStorage"  
						)
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t044",targetState="handle_Op",cond=whenDispatch("statoOp"))
					transition(edgeName="t045",targetState="handle_rp",cond=whenDispatch("numRP"))
					transition(edgeName="t046",targetState="handle_Inci",cond=whenDispatch("statoIn"))
					transition(edgeName="t047",targetState="handle_Ash",cond=whenDispatch("valAsh"))
				}	 
			}
		}
} 
