System testfunzionale

Event burnEnd : burnEnd(N)
Dispatch activation_command : activation_command(N)
Dispatch startBurn : startBurn(N)
//WIS e opRobot
Dispatch startRobot : startRobot(X)
//messaggi di interazione tra opRobot e basicRobot24
Request engage        : engage(OWNER, STEPTIME)
Reply   engagedone    : engagedone(ARG) for engage
Reply   engagerefused : engagerefused(ARG) for engage
Request moverobot    :  moverobot(TARGETX, TARGETY)
Reply moverobotdone  :  moverobotok(ARG)
Reply moverobotfailed:  moverobotfailed(PLANDONE, PLANTODO)
//updateResources
//Dispatch updatePosition : updatePosition(WasteStorage, AshStorage, StatoIncinerator, OpRobot Stato )
Dispatch info : info(X, Y)
//Dispatch info2 : info2(X, Y, X, Y)

Dispatch numRP : numRP(X)
Dispatch statoIn : statoIn(N)
Dispatch statoOp : statoOp(N)
Dispatch valAsh : valAsh(X)
Dispatch addAsh : addAsh(X)


//waste storage messages
Dispatch doread    : doread(X)
Event scaledata    : scaledata(D)   //emitted  by wastestorage_device  
Dispatch scalework : scalework(X)

//Wis & storage message

Request pollingRP : pollingRP(X)
Reply   numberRP  : numberRP(X) for pollingRP

//WIS E monitoring

Request pollingAsh : pollingAsh(X)
Reply valueAsh : valueAsh(X) for pollingAsh

//dall' OpRobot allo storage

Dispatch pickRP : pickRP(X)

//op robot -> sonar device

Dispatch deposit_ash:deposit_ash(X)


//WIS -> monitoring device
Dispatch turnLedOn : turnLedOn(X)
Dispatch turnLedOff : turnLedOff(X)


Event sonardata    : sonardata(D)   //emitted  by sonardevice  

//Dispatch sonarwork : sonarwork(X)
//Dispatch doread    : doread(X)

//LED MESSAGES

Dispatch ledOn : ledOn(X)
Dispatch ledOff : ledOff(X)
Dispatch ledBlink : ledBlink(X)
Dispatch valAsh : valAsh(X)
//WIS -> monitoring_device

Request pollingAsh : pollingAsh(X)
Reply valueAsh : valueAsh(X) for pollingAsh

Dispatch turnLedOn : turnLedOn(X)
Dispatch turnLedOff : turnLedOff(X)


Request start_test : start_test(X)
Reply start_test_reply : start_test_reply(X) for start_test
Dispatch infotest : infotest(X)
//sonar -> monitoring_device

Dispatch sonar_value:sonar_value(X)

//op robot -> sonar device (mock)

Dispatch deposit_ash:deposit_ash(X)

//context

Context ctxsprintdue ip [host="localhost" port=8080]
Context ctxbasicrobot ip [host="127.0.0.1"  port=8020]
Context ctxmonitor ip [host="127.0.0.1"  port=8128]

ExternalQActor basicrobot context ctxbasicrobot
ExternalQActor monitoring_device context ctxmonitor
ExternalQActor sonar_device context ctxmonitor


QActor wis context ctxsprintdue{
	[#
		var RobPos = ""
		var RP_w = 0
		var Ash_distance = 1000
		var Inc_stat = "off"
		val Ash_limit = 200  //qualche misura
		var rob = "idle" 
		
	#]
	
	State s0 initial{
		println("WIS: wis starting...") color red
		delay 2000
		observeResource oprobot msgid info
	 	forward incinerator -m activation_command : activation_command(start)
	 }
	 Goto wait_message
	 
	 State wait_message{
	 	println("WIS: waiting the state update...") color green
	 }
	 
	 Transition t0 whenMsg info  -> manageState //Ã¨ per forza quello lavoro off (si potrebbe aggiungere stato di errore)
	  													//quindi il robot sta aspettando il segnale
	State manageState{
		//per ora polling mock
		onMsg( info :  info(X,Y) ){
				[# RobPos = payloadArg(1)  #]		
		}
		//to_DO: UPDATE RESOURCES PER MONITOR (prossimi sprint)
		
		request scale -m pollingRP : pollingRP(N)
		request monitoring_device -m pollingAsh : pollingAsh(N)
 	}
 	
 	  
 	  Transition t1 whenReply numberRP   -> setRP
 	  
 	  State setRP{
 	  		onMsg(numberRP:numberRP(X)){
			[# RP_w = payloadArg(0).toInt() #]
			}
 	  }	
 	 
 	  Transition t1 whenReply valueAsh   -> setAsh			
 	              	
 	  State setAsh{
 	  	onMsg(valueAsh:valueAsh(X)){
			[# Ash_distance = payloadArg(0).toInt() #]
			}
			[#
         
         if(RP_w > 0 && Ash_distance > Ash_limit ){
         #]
         println(" WIS: invio messaggio start") color magenta
         println(" WIS: controllo: condizioni corrette e start") color magenta
         forward oprobot -m startRobot : startRobot( start )
        	
      [#
      	rob = "working"
      	}
   
      #]
		
 	  }
 	
 	  Goto idle if [# rob === "working" #] else polling

    	State polling{}
    	Transition t1 
    	whenTime 3000 -> manageState
    	
    	
    	State idle{
    		println("WIS: waiting for updates...") color green
    	}

		
		Transition t2 whenMsg info  -> managePosition
					  whenEvent burnEnd -> manageBurnEnd  //LO RECEPISCE PURE IL WISPER L?INTERAZIONE con il MONITORING_DEVICE
		
		
		State managePosition{
			println("WIS: changing the position...") color green
			onMsg( info :  info(X,Y) ){
				[# val Y = payloadArg(1)  #]
				println("WIS: robPosition -> $Y") color magenta
				//to-DO : UPDATE RESOURCE PER IL MONITOR
				[# RobPos = "$Y"
				if(Y.equals("BURNIN")){	
				#]
					println("WIS: incinerator BURN") color red
					forward incinerator -m startBurn : startBurn(start)
					forward monitoring_device -m turnLedOn : turnLedOn(X)
				[#
				}
				#]
				
			}
		}
		
		Goto testAdd if [# RobPos.equals("ASHOUT") #] else idle		 
		 
		 State manageBurnEnd{
		 	println("WIS: incinerator STOP BURN") color red
		 	forward monitoring_device -m turnLedOff : turnLedOff(X)
		 }
		 
		 Goto idle
		
		State testAdd{ //solo a fini di test
			forward monitoring_device -m addAsh : addAsh(X)
		}
		
		Goto wait_message


}


QActor incinerator context ctxsprintdue{
	[#
        val BTIME = 4000L;
        var start = "off";
        var stato = "spento";
	#]
	
	State s0 initial{
		println("incinerator ready...") color yellow
		delay 1000
	}
	
	Transition t0
		whenMsg activation_command -> start
		
	
	State start{
		println("the incinerator has started...") color green
		[# start ="on"; #]
		// invio stato a observedActor
		[# stato = "burning"; #]
		forward observedactor -m statoIn : statoIn(burning)

	}
	
	Transition t1
		whenMsg startBurn -> handleBurn
		
	State handleBurn{
		 //invio stato a observedActor
		[# stato = "burning"; #]
		forward observedactor -m statoIn : statoIn(burning)
		println("the incinerator is burning...") color red
		delay 15000
		emit burnEnd : burnEnd(finish)
		// invio stato a observedActor
		
		[# stato = "spento"; #]
		forward observedactor -m statoIn : statoIn(spento)
		
		
	}
	
	Transition t2
		whenMsg startBurn -> handleBurn
		
}



QActor oprobot context ctxsprintdue{
	
	[#
		var Position = ""
		var State = ""
	#]
	
	State s0 initial{
		println("opRobot ready...") color yellow
		delay 300
		
	}
	Goto invio
	
	State invio{
		request basicrobot -m engage : engage($MyName, 330)
		printCurrentMessage color blue
		println("opRobot manda request")
	}
	
	Transition t0 whenReply engagedone   -> home				
 	              whenReply engagerefused -> error
 	              
 	State home{
 		printCurrentMessage color blue
 		println("opRobot in HOME...") color red
 		[# Position = "HOME" #]
 		delay 5000
 		[# State = "idle" #]
 		forward observedactor -m statoOp : statoOp(idle_home)
 		updateResource [# "info($State, $Position)" #] 
 		
 	}
 	
 	Transition t1 whenMsg startRobot -> handleRP
 	
 	
 	State handleRP{
 		println("opRobot to RP...") color blue
 		[# State = "work" #]
 		updateResource [# "info($State, $Position)" #] 
 		request basicrobot -m moverobot : moverobot (0,4) //pos wateIN
 		 forward observedactor -m statoOp : statoOp(moving_WasteIn)
 		
 	}
 	
 	Transition t2 whenReply moverobotdone   -> handleBurnIn			
 	              whenReply moverobotfailed -> error
 	              
 	              
 	State handleBurnIn{
 		println("opRobot in wateIn going to burnIn...") color yellow
 		[# Position = "WASTEIN" #]
 		delay 2000 //pick up time
 		forward observedactor -m statoOp : statoOp(taking_RP)
 		forward scale -m pickRP : pickRP(N)   //SOLO PER EMULARE COMPORTAMENTO MECCANICO
 		updateResource [# "info($State, $Position)" #] 
 		request basicrobot -m moverobot : moverobot (3,1) //pos burnIn
 		forward observedactor -m statoOp : statoOp(moving_BurnIn)
 		
 		
 		
 	} 
 	
 	
 	Transition t3 whenReply moverobotdone   -> handleHome2		
 	              whenReply moverobotfailed -> error
 	              
 	              
 	 State handleHome2{
 	 	println("opRobot in burIn going to HOME...") color yellow
 		[# Position = "BURNIN" #]
 		delay 2000 //deposit time
 	//	forward observedactor -m statoOp : statoOp(leaving_RP)
 		updateResource [# "info($State, $Position)" #]  		
 		request basicrobot -m moverobot : moverobot (0,0) //HOME
 		//forward observedactor -m statoOp : statoOp(going_home)
 		
 	 }
 	 
 	 
 	 Transition t4 whenReply moverobotdone   -> home2	
 	              	whenReply moverobotfailed -> error
 	              	
 	              	
 	  State home2{
 	  	println("opRobot HOME waiting for the incinerator to stop...") color yellow
 	  	[# Position = "HOME" #]
 	  	forward observedactor -m statoOp : statoOp(waiting_home_end_of_burn)
 		updateResource [# "info($State, $Position)" #] 
 	  	
 	  }
 	  
 	  
 	  Transition t5 whenEvent burnEnd -> handleBurnOut
 	  
 	  
 	  State handleBurnOut{
 	  	println("opRobot in HOME going to gathering ashes...") color yellow
 	  	forward observedactor -m statoOp : statoOp(moving_burnout)
 		request basicrobot -m moverobot : moverobot (5,3) // burnOUT
 	  }
 	  
 	  Transition t6 whenReply moverobotdone   -> handleBurnOutGo	
 	              	whenReply moverobotfailed -> error
 	              	
 	              	
 	  
 	   State handleBurnOutGo{
 	 	println("opRobot in BurnOUT going to AshOUT...") color yellow
 		[# Position = "BURNOUT" #]
 		 forward observedactor -m statoOp : statoOp(taking_ash)
 		delay 2000 //gathering time
 		updateResource [# "info($State, $Position)" #] 
 		request basicrobot -m moverobot : moverobot (6,4) //AshOUT
 		forward observedactor -m statoOp : statoOp(moving_ashout)
 		
 	 }
 	 
 	 
 	  Transition t7 whenReply moverobotdone   -> handleAshOut	
 	              	whenReply moverobotfailed -> error
 	              	
 	              	
 	  State handleAshOut{
 	  	println("opRobot in AshOUT going to HOME...") color yellow
 	  	println("RESTARTING THE ROUTINE...") color red
 		[# Position = "ASHOUT" #]
 		forward sonar_device -m deposit_ash : deposit_ash(X) //mock deposit
 		forward observedactor -m statoOp : statoOp(deposit_ash)
 		delay 2000 //deposit time
 		updateResource [# "info($State, $Position)" #] 
 		request basicrobot -m moverobot : moverobot (0,0) //HOME
 		forward observedactor -m statoOp : statoOp(end_return_home)
 		
 	  }
 	  
 	  
 	  Transition t7 whenReply moverobotdone   -> home	
 	              	whenReply moverobotfailed -> error
 	 
 	  
 	              	
 	              	
 	       
 	              	
  	State error{
 		println("ERROR...") color red
 		[#System.exit(-1)#]
 	}
}









//SCALE COMPONENTs



QActor scale context ctxsprintdue{
	[#
		
		var RP_number = 0
		
	#]   
	State s0 initial{  
		println("scale | ready") 
		delay 1000 //give time to start scaledevice ...
		subscribeTo scale_device for scaledata
 	}
	Goto work
	
	State work{
		println("$name | waits ... ") 		
	}
	Transition t0 whenEvent scaledata -> handlescaledata
				  whenRequest pollingRP -> handlepolling  //dal WIS
				  whenMsg pickRP -> handlepick // dall'OpRobot
 	 
	State handlescaledata{
		printCurrentMessage color yellow
		onMsg( scaledata : scaledata(D) ){
			println("$name | weight=${payloadArg(0)}") color magenta
			
			[# RP_number = RP_number + 1  #]
			println("$name | the RP number now is $RP_number ") color magenta
			// update numero di RP : ne hanno aggiunto uno
			forward observedactor -m numRP : numRP($RP_number)
		}
	}
	Goto work 
	
	
	State handlepolling{
		println("scale | polling request from WIS")
		replyTo pollingRP with numberRP : numberRP($RP_number)
	}
	
	Goto work
	
	State handlepick{
		println("$name | pick request from robot, the RP number is $RP_number") color magenta
		[# RP_number = RP_number - 1 #]
		// update numero di RP : ne hanno tolti
		forward observedactor -m numRP : numRP($RP_number)
		
	}
	
	Goto work
	 
 }   








QActor scale_device context ctxsprintdue{
[# var W = 0 #]
	
	State s0 initial{  
		println("scale device ready") color green
		delay 1000 
		
 	}
 	
 	Goto work
 	
 	State work{
 		
 		[# W = 50  #]
 		//simulazione arrivo di un RP
 		emitlocalstream scaledata : scaledata($W)
 		delay 45000
 	}
 	
 	Goto work
 	
}//sonardevice
//
QActor observedactor context ctxsprintdue{
	[#
		var WasteStorage = 0;
		var AshStorage = 0;
		var InciStatus = "spento";
		var OpRobot = "home";
	#]
	
	
	State s0 initial{
		println("$name attivo") color blue
		delay 500
	}
	Goto ready
	
	State ready {
		println("$name READY") color green
		updateResource[# "$name	INFO:	numero RP: $WasteStorage incinerator: $InciStatus	robot: $OpRobot	ash: $AshStorage" #]
	}
	
	Transition t1 whenMsg numRP -> handle_rp
				  whenMsg statoIn -> handle_Inci
				  whenMsg statoOp -> handle_Op
				  whenMsg valAsh -> handle_Ash
				
				  
	State handle_rp{
		println("$name aggiorno stato di WasteStorage")
		onMsg(numRP:numRP(X)){
			[# var kg = payloadArg(0).toInt()
				WasteStorage = kg // 50
			 #]
		}
		println("$name numero RP: $WasteStorage  incinerator: $InciStatus	robot: $OpRobot	 ash: $AshStorage")
		updateResource[# "$name	INFO:	numero RP: $WasteStorage  incinerator: $InciStatus	robot: $OpRobot	 ash: $AshStorage" #]
	}
	
	Transition t1 whenMsg numRP -> handle_rp
				  whenMsg statoIn -> handle_Inci
				  whenMsg statoOp -> handle_Op
				  whenMsg valAsh -> handle_Ash
				  
				  
	State handle_Inci{
		println("$name aggiorno stato di Incinerator")
		onMsg(statoIn:statoIn(N)){
			[# InciStatus = payloadArg(0) #]
		}
		println("$name numero RP: $WasteStorage  incinerator: $InciStatus	robot: $OpRobot	 ash: $AshStorage")
		updateResource[# "$name	INFO:	numero RP: $WasteStorage  incinerator: $InciStatus	robot: $OpRobot	 ash: $AshStorage" #]
	}
	
	Transition t1 whenMsg numRP -> handle_rp
				  whenMsg statoIn -> handle_Inci
				  whenMsg statoOp -> handle_Op
				  whenMsg valAsh -> handle_Ash
				  
				  
	State handle_Op{
		println("$name aggiorno stato di OpRobot")
		
		onMsg(statoOp:statoOp(N)){
			[# OpRobot = payloadArg(0) #]
		}
		println("$name numero RP: $WasteStorage  incinerator: $InciStatus	robot: $OpRobot	 ash: $AshStorage")
		updateResource[# "$name	INFO:	numero RP: $WasteStorage  incinerator: $InciStatus	robot: $OpRobot	 ash: $AshStorage" #]
	}
	
	Transition t0 whenMsg statoOp -> handle_Op
				  whenMsg numRP -> handle_rp
				  whenMsg statoIn -> handle_Inci
				  whenMsg valAsh -> handle_Ash
				  
	State handle_Ash{
		println("$name aggiorno stato di AshStorage")
		onMsg(valAsh:valAsh(X)){
			[# AshStorage = payloadArg(0).toInt() #]
		}
		println("$name numero RP: $WasteStorage  incinerator: $InciStatus	robot: $OpRobot	 ash: $AshStorage")
		updateResource[# "$name	INFO:	numero RP: $WasteStorage  incinerator: $InciStatus	robot: $OpRobot	 ash: $AshStorage" #]
	}
	
	Transition t0 whenMsg statoOp -> handle_Op
				  whenMsg numRP -> handle_rp
				  whenMsg statoIn -> handle_Inci
				  whenMsg valAsh -> handle_Ash
}


QActor test_observer context ctxsprintdue{
	[# var W = 50 #]
	
	
	State s0 initial{
		println("START TEST") color red
		delay 1000
		observeResource monitoring_device msgid infotest
	}
	
	Transition t1 whenRequest start_test -> handleStart
	
	State handleStart{
		emitlocalstream scaledata : scaledata($W)
 		delay 45000
 		println("TEST IN HANDLESTART") color red
	}
	
	
	Transition t2 whenMsg infotest -> handle_info
	
	State handle_info{
		println("TEST ESEGUITO CON SUCCESSO RISPONDO") color red
		replyTo start_test with start_test_reply : start_test_reply(OK)
	}
	
}

//QActor monitoring_device context ctxsprintdue{
//	[#
//		val DLIMIT = 200
//		var Ash_level = 1000
//		var burning = 0
//	#]
//	
//	State s0 initial{
//		println("START monitoring_device") color green
//		delay 1000
//	}
//	
//	Goto idle
//	
//	State idle{
//		println("Monitoring device : WAITING FOR MESSAGES") color green
//	}
//	
//	
//	Transition t0 whenMsg sonar_value -> handleSonar
//				  whenMsg turnLedOff -> handleTurnOff
//				  whenMsg turnLedOn -> handleTurnOn
//				  whenRequest pollingAsh -> handlePolling
//				  whenMsg addAsh -> handleAdd  //solo a fini di test
//				  
//	State handleAdd{
//		println("Monitorign: sono in aggiunta ") color red
//		[# Ash_level = Ash_level + 200 #]
//		updateResource [# "info($Ash_level)" #] 
//	}
//		
//			  
//	Goto idle	
//				  
//	
//				  
//	State handleSonar{
//		onMsg(sonar_value:sonar_value(K)){
//			[# Ash_level = payloadArg(0).toInt() #]
//			println("Ash_level: $Ash_level") color red
//			
//	//		forward observedactor -m valAsh : valAsh($Ash_level)
//			if [# Ash_level<=DLIMIT || Ash_level == 1000 #] {
//				forward led -m ledBlink:ledBlink(N)
//			}else {
//				if [# burning==1 #] {
//						forward led -m ledOn:ledOn(N)                             
//				}else{
//					forward led -m ledOff:ledOff(N) 
//				}
//				
//			}
//			
//		}
//	}
//	
//	Goto idle
//	
//	State handleTurnOff{
//		println("Monitoring device : burning off") color red
//		[# burning = 0 #]
//		forward led -m ledOff:ledff(N)
//	}
//	
//	Goto idle
//	
//	State handleTurnOn{
//		println("Monitoring device : burning on") color red
//		[# burning = 1 #]
//		forward led -m ledOn:ledOn(N)
//	}
//	
//	Goto idle
//	
//	State handlePolling{
//		println("Monitoring device : polling requested from WIS") color red
//		replyTo pollingAsh with valueAsh : valueAsh($Ash_level)
//	}
//	
//	Goto idle
//	
//	
//}
//
//
//
//QActor led context ctxsprintdue{
//	[#
//		lateinit var p : Process
//		lateinit var p1 : Process
//		lateinit var p2 : Process
//	#]
//	
//	State s0 initial{
//		println("START LED") color green
//		delay 1000
//	}
//	
//	Goto idle
//	
//	State idle{
//		println("LED waiting for indications") color magenta
//		delay 1000
//	}
//	
//	Transition t0 whenMsg ledOn -> handleOn
//				  whenMsg ledOff -> handleOff
//				  whenMsg ledBlink -> handleBlink
//				  
//	State handleOn{
//		println("LED ON") color green
//		//[# p       = Runtime.getRuntime().exec("python ledOn.py") #]
//	}		
//	
//	Goto idle
//	
//	State handleOff{
//		println("LED OFF") color green
//		//[# p1       = Runtime.getRuntime().exec("python edOff.py") #]
//	}	  
//				  
//	Goto idle
//	
//	State handleBlink{
//		println("LED BLINK") color green
//		//[# p2       = Runtime.getRuntime().exec("python ledBlink.py") #]
//	}
//	
//	Goto idle
//}
//
//
//
//
//
//
//
//
//
//QActor sonar context ctxsprintdue{
//	State s0 initial{
//		println("START sonar") color green
//		delay 1000
//		subscribeTo sonar_device for sonardata
//	}
//	Transition t0 whenEvent sonardata -> handleSonar
//	
//	State handleSonar{
//		
//		onMsg( sonardata : sonardata(K) ){
//			//println("im on handle sonar") color green
//			[# var D = payloadArg(0) #]
//			forward monitoring_device -m sonar_value:sonar_value($D)
//		}
//	}
//	Transition t0 whenEvent sonardata -> handleSonar
//}
//
//
//
//
//QActor sonar_device context ctxsprintdue{  //mock
//	[# var K= 0 #]
//	
//	State s0 initial{
//		println("START sonar_device") color yellow
//		[# K= 1000 #]  //empty
//		delay 1500
//		emitlocalstream sonardata:sonardata($K)
//	}
//	
//	Goto idle
//	
//	State idle{
//		println("sonar_device waiting..") color yellow
//	}
//	
//	Transition t0 whenTime 80000 -> gatherAsh
//					whenMsg deposit_ash -> handleAsh
//				  
//	
//	State handleAsh{
//		
//		[# K= K - 200 #]  //robot da ash
//		println("ASH = $K") color yellow
//		emitlocalstream sonardata:sonardata($K)
//		
//	}
//	
//	Goto idle
//	
//	State gatherAsh{
//		
//		[# K= 1000 #]
//		println("ASH vuoto") color yellow
//		emitlocalstream sonardata:sonardata($K)
//	}
//				  
//	Goto idle	  
//	
//}

