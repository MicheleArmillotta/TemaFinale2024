/* Generated by AN DISI Unibo */ 
package it.unibo.waste_incinerator

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023

//User imports JAN2024

class Waste_incinerator ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "state_init"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		return { //this:ActionBasciFsm
				state("state_init") { //this:State
					action { //it:State
						observeResource("localhost","11800","ctx_waste_incinerator","wastestorage","infoRP")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="state_idle",cond=whenDispatch("start"))
				}	 
				state("state_idle") { //this:State
					action { //it:State
						CommUtils.outblack("[WasteIncinerator] Idle...")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t01",targetState="state_control_Ash",cond=whenDispatch("infoRP"))
				}	 
				state("state_control_Ash") { //this:State
					action { //it:State
						CommUtils.outblack("[WasteIncinerator] RP is waiting in the waste storage")
						request("full", "fullRequest("_")" ,"monitoringdevice" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t12",targetState="state_wait_Ash",cond=whenReply("fullYes"))
					transition(edgeName="t13",targetState="state_pick_RP",cond=whenReply("fullNo"))
				}	 
				state("state_wait_Ash") { //this:State
					action { //it:State
						CommUtils.outblack("[WasteIncinerator] RP is waiting in the waste storage, but the ash storage is full")
						CommUtils.outblack("[WasteIncinerator] waiting...")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t14",targetState="state_pick_RP",cond=whenDispatch("removed"))
				}	 
				state("state_pick_RP") { //this:State
					action { //it:State
						CommUtils.outblack("[WasteIncinerator] starting the robot")
						request("goPickRP", "goPickRP("_")" ,"oprobot" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t15",targetState="state_go_burnin",cond=whenReply("finished"))
				}	 
				state("state_go_burnin") { //this:State
					action { //it:State
						delay(3000) 
						CommUtils.outblack("[WasteIncinerator] goBurnin")
						request("goBurnin", "goBurnin("_")" ,"oprobot" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t16",targetState="state_start_incinerator",cond=whenReply("finished"))
				}	 
				state("state_start_incinerator") { //this:State
					action { //it:State
						delay(3000) 
						CommUtils.outblack("[WasteIncinerator] starting the Incinerator")
						forward("burn", "burnrequest("_")" ,"incinerator" ) 
						forward("goHome", "goHome("_")" ,"oprobot" ) 
						CommUtils.outblack("[WasteIncinerator] waiting for the incinerator to stop")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t17",targetState="state_go_burnout",cond=whenEvent("signal"))
				}	 
				state("state_go_burnout") { //this:State
					action { //it:State
						CommUtils.outblack("[WasteIncinerator] going to the burnout port")
						request("goBurnout", "goBurnout("_")" ,"oprobot" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t18",targetState="state_go_deposit",cond=whenReply("finished"))
				}	 
				state("state_go_deposit") { //this:State
					action { //it:State
						delay(3000) 
						CommUtils.outblack("[WasteIncinerator] going to the ash deposit")
						request("goDepositAsh", "goDepositAsh("_")" ,"oprobot" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t19",targetState="state_go_home",cond=whenReply("finished"))
				}	 
				state("state_go_home") { //this:State
					action { //it:State
						delay(3000) 
						CommUtils.outblack("[WasteIncinerator] finished the process")
						request("goHomeAsh", "goHomeAsh("_")" ,"oprobot" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t110",targetState="state_idle",cond=whenReply("finished"))
				}	 
			}
		}
} 
