/* Generated by AN DISI Unibo */ 
package it.unibo.incineratorservicestatusgui

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023

//User imports JAN2024

class Incineratorservicestatusgui ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "state_init"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		
				
				var opRobotPosition: HOME
				var currentRP: Float = 0.0f
				var currentAsh: Float = 0.0f
				var incineratorStatus = off
		return { //this:ActionBasciFsm
				state("state_init") { //this:State
					action { //it:State
						CommUtils.outblack("[IncineratorServiceStatusGUI] Initializing...")
						CommUtils.outblack("[WasteServiceStatusGUI] Initialization completed. Current state:")
						CommUtils.outblack("opRobotPosition: $opRobotPosition")
						CommUtils.outblack("currentRP: $currentRP")
						CommUtils.outblack("currentAsh: $currentAsh ")
						CommUtils.outblack("inineratorStatus: $incineratorStatus ")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="state_idle", cond=doswitch() )
				}	 
				state("state_idle") { //this:State
					action { //it:State
						CommUtils.outblack("[IncineratorServiceStatusGUI] Waiting for updates...")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t024",targetState="state_handle_update",cond=whenDispatch("updategui"))
				}	 
				state("state_handle_update") { //this:State
					action { //it:State
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="state_idle", cond=doswitch() )
				}	 
			}
		}
} 
