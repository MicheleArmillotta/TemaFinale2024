/* Generated by AN DISI Unibo */ 
package it.unibo.wastestorage

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023

//User imports JAN2024

class Wastestorage ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		 
			var working = false
		    var weight = 0
		    var newWeight = 0
		    var RP = 0
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outblack("starting the wastestorage")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="startTheStorage", cond=doswitch() )
				}	 
				state("startTheStorage") { //this:State
					action { //it:State
						
						    	working = true		
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="readWeight", cond=doswitch() )
				}	 
				state("readWeight") { //this:State
					action { //it:State
						if(  newWeight > Weight  
						 ){CommUtils.outyellow("$RP deposited by external agents")
						 Weight = newWeight
								       RP = Weight/50		
								    	
								    	
						updateResourceRep(infoRP($RP) 
						)
						forward("updategui", "updategui("TODO")" ,"incineratorservicestatusgui" ) 
						}
						forward("doread", "doread(1)" ,name ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t017",targetState="readWeight",cond=whenDispatchGuarded("doread",{ working    
					}))
				}	 
			}
		}
} 
