/* Generated by AN DISI Unibo */ 
package it.unibo.oprobot

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023

//User imports JAN2024

class Oprobot ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "state_init"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		return { //this:ActionBasciFsm
				state("state_init") { //this:State
					action { //it:State
						CommUtils.outblack("[opRobot] HOME")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="state_idle", cond=doswitch() )
				}	 
				state("state_idle") { //this:State
					action { //it:State
						CommUtils.outblack("[opRobot] Idle...")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t011",targetState="state_RP",cond=whenRequest("goPickRP"))
					transition(edgeName="t012",targetState="state_burnin",cond=whenRequest("goBurnin"))
					transition(edgeName="t013",targetState="state_home",cond=whenDispatch("goHome"))
					transition(edgeName="t014",targetState="state_burnout",cond=whenRequest("goBurnout"))
					transition(edgeName="t015",targetState="state_deposit",cond=whenRequest("goDepositAsh"))
					transition(edgeName="t016",targetState="state_home_ash",cond=whenRequest("goHomeAsh"))
				}	 
				state("state_RP") { //this:State
					action { //it:State
						answer("goPickRP", "finished", "finished("")"   )  
						forward("updategui", "updategui("TODO")" ,"incineratorservicestatusgui" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="state_idle", cond=doswitch() )
				}	 
				state("state_burnin") { //this:State
					action { //it:State
						answer("goBurnin", "finished", "finished("")"   )  
						forward("updategui", "updategui("TODO")" ,"incineratorservicestatusgui" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="state_idle", cond=doswitch() )
				}	 
				state("state_home") { //this:State
					action { //it:State
						forward("updategui", "updategui("TODO")" ,"incineratorservicestatusgui" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="state_idle", cond=doswitch() )
				}	 
				state("state_burnout") { //this:State
					action { //it:State
						answer("goBurnout", "finished", "finished("")"   )  
						forward("updategui", "updategui("TODO")" ,"incineratorservicestatusgui" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="state_idle", cond=doswitch() )
				}	 
				state("state_deposit") { //this:State
					action { //it:State
						answer("goDepositAsh", "finished", "finished("")"   )  
						forward("updategui", "updategui("TODO")" ,"incineratorservicestatusgui" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="state_idle", cond=doswitch() )
				}	 
				state("state_home_ash") { //this:State
					action { //it:State
						answer("goHomeAsh", "finished", "finished("")"   )  
						forward("updategui", "updategui("TODO")" ,"incineratorservicestatusgui" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="state_idle", cond=doswitch() )
				}	 
			}
		}
} 
