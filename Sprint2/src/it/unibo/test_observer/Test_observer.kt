/* Generated by AN DISI Unibo */ 
package it.unibo.test_observer

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023

//User imports JAN2024

class Test_observer ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		 var W = 50  
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outred("START TEST")
						delay(1000) 
						observeResource("localhost","8080","ctxtest","monitoring_device","infotest")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t136",targetState="handleStart",cond=whenRequest("start_test"))
				}	 
				state("handleStart") { //this:State
					action { //it:State
						emitLocalStreamEvent("scaledata", "scaledata($W)" ) 
						delay(45000) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t237",targetState="handle_info",cond=whenDispatch("infotest"))
				}	 
				state("handle_info") { //this:State
					action { //it:State
						CommUtils.outred("TEST ESEGUITO CON SUCCESSO RISPONDO")
						answer("start_test", "start_test_reply", "start_test_reply(OK)"   )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
			}
		}
} 
